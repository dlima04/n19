function(sanitizer_error_if_not_clang)
  if(NOT (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
    message(FATAL_ERROR "Cannot build with Clang sanitizers - wrong compiler.")
  endif()
endfunction()

function(target_link_clang_sanitizer target visibility)
  sanitizer_error_if_not_clang()
  list(REMOVE_AT ARGV 0)
  string(REPLACE ";" "," sanitizer "${ARGV}")
  target_link_libraries(${target} ${visibility} -fsanitize=${sanitizer})
  message(STATUS "Build Target ${target} -- Linking Clang Sanitizer(s): ${sanitizer}")
endfunction()

function(target_configure_clang_sanitizer target visibility)
  sanitizer_error_if_not_clang()
  list(REMOVE_AT ARGV 0)
  string(REPLACE ";" "," sanitizer "${ARGV}")
  target_compile_options(${target} ${visibility} -fsanitize=${sanitizer} -g -fno-omit-frame-pointer)
  message(STATUS "Build Target ${target} -- Sanitizer(s) Added to CL-opt: ${sanitizer}")
endfunction()

# the following functions add sanitizers globally. Generally we want to just use these.
function(link_clang_sanitizer)
  sanitizer_error_if_not_clang()
  list(REMOVE_AT ARGV 0)
  string(REPLACE ";" "," sanitizer "${ARGV}")
  message(STATUS "Linking Clang Sanitizer(s): ${sanitizer}")
  link_libraries(-fsanitize=${sanitizer})
endfunction()

function(configure_clang_sanitizer)
  sanitizer_error_if_not_clang()
  list(REMOVE_AT ARGV 0)
  string(REPLACE ";" "," sanitizer "${ARGV}")
  compile_options(-fsanitize=${sanitizer} -g -fno-omit-frame-pointer)
  message(STATUS "Sanitizer(s) Added to CL-opt: ${sanitizer}")
endfunction()
